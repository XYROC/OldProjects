package de.game.core;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.swing.JFrame;
import javax.swing.JProgressBar;

import de.game.core.graphics.Screen;
import de.game.core.input.Keyboard;
import de.game.core.levels.Level;
import de.game.core.levels.RandomLevel;


public class Game extends Canvas implements Runnable{
	
	private static final long serialVersionUID = 1L;
	
	
	public static int width = 770;
	public static int height = width /16 *9;
	public static int scale = 3;
	
	public static String title = "Core";
	public static String version = "0.1";
	
	private Thread thread;
	private JFrame frame;
	private Keyboard key;
	private Level level;
	private boolean running = false;
	
	private JProgressBar loading;
	
	public int loadingprogress = 0;
	
	private BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
	private int[] pixels = ((DataBufferInt)image.getRaster().getDataBuffer()).getData();
	
	private Screen screen;
	
	int x=0,y=0;
	
	public Game(){
		Dimension size = new Dimension(width*scale,height*scale);
		setPreferredSize(size);
		screen = new Screen(width,height);
		frame = new JFrame();
		loading = new JProgressBar();
		key = new Keyboard();
		level = new RandomLevel(256, 256);
		addKeyListener(key);
		
	}
	
	public synchronized void start(){
		running = true;
		thread = new Thread(this,"Display");
		thread.start();
		
	}
	public synchronized void stop(){
		
		running = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	public void run(){
		long lastTime = System.nanoTime();
		long timer = System.currentTimeMillis();
		final double ns = 1000000000.0 / 60.0;
		double delta = 0;
		int frames = 0;
		int updates = 0;
		requestFocus();
		while (running) {
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			while(delta >= 1){
				update();
				updates++;
				delta--;
			}
			render();
			frames++;
			if(System.currentTimeMillis() - timer > 1000){
				timer += 1000;
				SimpleDateFormat datenow = new SimpleDateFormat("dd:MM:yyy hh:mm:ss");
				String datestring = datenow.format(new Date());
				System.out.println("["+datestring+"] "+"[CORE]"+"[CONSOLE]"+updates+" ups, "+frames+" fps");
				frame.setTitle(title + " "+version+" |"+frames+" FPS");
				frames = 0;
				updates = 0;
			}
			
		}
		stop();
		
	}
	public void update(){
		key.update();
		if(key.up)y++;
		if(key.down)y--;
		if(key.right) x--;
		if(key.left)x++;
		
	}
	public void render(){
		BufferStrategy bs = getBufferStrategy();
		if(bs == null){
			createBufferStrategy(3);
			return;
		}
		screen.clear();
		level.render(x<<2, y<<2, screen);
		//screen.render(x,y);
		
		for(int i = 0;i <pixels.length;i++){
			pixels[i] = screen.pixels[i];
			
		}
		
		Graphics g = bs.getDrawGraphics();
		g.drawImage(image, 0, 0, getWidth(), getHeight(), null);
		g.dispose();
		
		bs.show();
	}
	public static void main(String[] args){
		Game game = new Game();
		game.frame.setResizable(true);
		game.frame.setTitle(title + " "+version);
		game.frame.add(game);
		game.frame.pack();
		game.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		game.frame.setLocationRelativeTo(null);
		game.frame.setVisible(true);
		
		game.loading.setLayout(null);
		game.loading.setVisible(true);
		game.loading.setBounds(100,100,50,100);
		game.loading.setForeground(Color.RED);
		game.loading.setBackground(Color.WHITE);
		
		game.start();
	}
}
